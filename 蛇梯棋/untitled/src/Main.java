import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public static void main(String[] args) {
//        int[][] board = new int[][]{
//            {-1,-1,-1,-1,-1,-1},
//            {-1,-1,-1,-1,-1,-1},
//            {-1,-1,-1,-1,-1,-1},
//            {-1,35,-1,-1,13,-1},
//            {-1,-1,-1,-1,-1,-1},
//            {-1,15,-1,-1,-1,-1}
//        };
//        int[][] board = new int[][]{
//                {-1, -1},
//                {-1, 3}
//        };
        int[][] board = new int[][]{
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
        };
        int i = snakesAndLadders(board);
        System.out.println(i);
    }

    public static int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean isRight = true;
        boolean[] visited= new boolean[n * n + 1];
        int[] data = new int[n * n + 1];
        int index = 1;
        for (int i = n - 1; i >= 0; i--) {
            if(isRight){
                for (int j = 0; j < n; j++) {
                    data[index++] = board[i][j];
                }
            }else{
                for (int j = n - 1; j >= 0; j--) {
                    data[index++] = board[i][j];
                }
            }
            isRight = !isRight;
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{1, 0});
        visited[1] = true;
        while(!queue.isEmpty()){
            int[] head = queue.poll();
            int curIndex = head[0];
            int step = head[1];
            if(curIndex == n * n){
                return step;
            }
            for (int i = 1; i <= 6 && curIndex + i <= n * n; i++) {
                int nextIndex = curIndex + i;
                if(data[curIndex + i] != -1){
                    nextIndex = data[curIndex + i];
                }
                if(!visited[nextIndex]){
                    queue.offer(new int[]{nextIndex, step + 1});
                    visited[nextIndex] = true;
                }
            }
        }
        return -1;
    }
}
